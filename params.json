{
  "name": "CapyTracker",
  "tagline": "Track your user with love!",
  "body": "# CapyTracker\r\n\r\n[![npm version](https://badge.fury.io/js/capy-tracker.svg)](https://badge.fury.io/js/capy-tracker)\r\n[![Travis Status](https://api.travis-ci.org/haskellcamargo/capy-tracker.svg?branch=master)](https://travis-ci.org/haskellcamargo/capy-tracker)\r\n[![Code Climate](https://codeclimate.com/github/haskellcamargo/capy-tracker/badges/gpa.svg)](https://codeclimate.com/github/haskellcamargo/capy-tracker)\r\n[![Issue Count](https://codeclimate.com/github/haskellcamargo/capy-tracker/badges/issue_count.svg)](https://codeclimate.com/github/haskellcamargo/capy-tracker)\r\n\r\nA Node-compliant user tracking library made with <img src='https://cdn0.iconfinder.com/data/icons/small-n-flat/24/678087-heart-128.png' width='16' height='16' alt='love' /> and JS.\r\n\r\n![CapyTracker](http://i.imgur.com/EpvXgNq.jpg)\r\n\r\nCapyTracker is a session tracker. It'll fetch informations like visited pages, browser name and version, date and session durations and send over your customized API.\r\n\r\n## Installation\r\n\r\nYou can install the library directly via [`npm`](https://www.npmjs.com/package/capy-tracker) and add it as a dependency for your project:\r\n\r\n`npm install --save capy-tracker`\r\n\r\nIf you are a power user, you may want to compile from sources. It is also quite simple!\r\n\r\n```shell\r\nsudo npm install -g webpack\r\ngit clone --depth=1 https://github.com/haskellcamargo/capy-tracker.git\r\ncd capy-tracker/\r\nnpm install\r\nwebpack\r\nwebpack --minify\r\n```\r\n\r\nThe source files `capy-tracker.js` and `capy-tracker.min.js` will be generate inside `dist/` directory.\r\nIf you want to run the tests, do `npm test`:\r\n\r\n![npm test](http://i.imgur.com/VXz0vjl.png)\r\n\r\n## Usage\r\n\r\nInclude `capy-tracker.min.js` in every page you want to track. The library has no autoload, you must initialize it (believe, side-effects aren't cool). The library exports the `CapyTracker` object-class.\r\n\r\nExample:\r\n```javascript\r\nconst definitelyNotATracker = new CapyTracker({ target: window, api: apiUrl });\r\ndefinitelyNotATracker.start();\r\n```\r\n\r\n`.start()` will trigger the initialization. If a user session already exists, CapyTracker will take it; otherwise, a session will be created.\r\n\r\nThe tracker receives in its constructor an object containing the `target` (`window`, unless you are on Node) and the the `api` (URL). It'll touch the API everytime an interaction happens.\r\n\r\n## Prototype\r\n\r\nThe following methods are exposed:\r\n\r\n```haskell\r\ngetCurrentSession :: Maybe string -- Returns a monad containing \"Just\" the current session or \"Nothing\"\r\nstart :: () -- Initializes a session or reuses the current one\r\ntrackTime :: () -- Call this after `start` if you want to log when user quits your page\r\nstop :: () -- Kills the current session permanently\r\ncollectData :: {\r\n  url :: { hostname :: string, pathname :: string },\r\n  date :: number,\r\n  browser :: { name :: string, version :: string }\r\n} -- Purely gives the current information\r\n```\r\n\r\n## API\r\n\r\nThe API should be compliant with the following\r\n\r\n- Signals will be sent over **POST**\r\n- The request body will contain a JSON with a `type` entry (`SESSION` or `DURATION`)\r\n- When `SESSION`, `data` will contain the content of calling `collectData`\r\n- When `DURATION`, `data` will contain the number representation of the time interval\r\n\r\n\r\nA special thanks to [@ythecombinator](https://github.com/ythecombinator/), who provided me the logo!\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}